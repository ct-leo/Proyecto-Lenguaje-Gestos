# Archivo: .github/workflows/deploy.yml
# Copiar este archivo a tu repositorio en .github/workflows/deploy.yml

name: 🚀 Deploy Django to VPS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      force_deploy:
        description: 'Force deploy even if tests fail'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Job 1: Tests y validaciones
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        cd Backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django coverage
    
    - name: 🔍 Run linting
      run: |
        cd Backend
        python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        python -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: 🧪 Run Django tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
      run: |
        cd Backend
        python manage.py check
        python manage.py migrate
        coverage run --source='.' manage.py test
        coverage report
        coverage xml
    
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./Backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  # Job 2: Build Frontend (si aplica)
  build-frontend:
    name: 🏗️ Build Frontend
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'Frontend/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: Frontend/package-lock.json
    
  
    - name: 📦 Install dependencies
      run: |
        cd Frontend
        npm ci
    
    - name: 🏗️ Build frontend
      run: |
        cd Frontend
        npm run build
    
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: Frontend/dist/
        retention-days: 1

  # Job 3: Security scan
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 🔒 Run safety check
      run: |
        cd Backend
        pip install safety
        safety check -r requirements.txt
    
    - name: 🔍 Run bandit security linter
      run: |
        cd Backend
        pip install bandit
        bandit -r . -x tests/

  # Job 4: Deploy to VPS
  deploy:
    name: 🚀 Deploy to VPS
    runs-on: ubuntu-latest
    needs: [test, security]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch') ||
      (needs.test.result == 'success' || github.event.inputs.force_deploy == 'true')
    
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://devproyectos.com
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
    
    - name: 🚀 Deploy to VPS
      run: |
        ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'EOF'
          set -e
          
          echo "🔄 Starting deployment..."
          
          # Ir al directorio del proyecto
          cd /var/www/Proyecto-Lenguaje-Gestos
          
          # Verificar que estamos en el directorio correcto
          if [ ! -f "deploy.sh" ]; then
            echo "❌ deploy.sh not found in $(pwd)"
            exit 1
          fi
          
          # Ejecutar script de despliegue
          echo "📦 Running deployment script..."
          ./deploy.sh deploy ${{ github.ref_name }}
          
          # Verificar que los servicios están corriendo
          echo "✅ Verifying services..."
          systemctl is-active --quiet gunicorn || {
            echo "❌ Gunicorn is not running"
            systemctl status gunicorn
            exit 1
          }
          
          systemctl is-active --quiet nginx || {
            echo "❌ Nginx is not running"
            systemctl status nginx
            exit 1
          }
          
          # Test básico de conectividad
          echo "🔍 Testing connectivity..."
          curl -f -s http://localhost/vista02/api/predict -X POST \
               -H "Content-Type: application/json" \
               -d '{}' > /dev/null || {
            echo "⚠️ API endpoint test failed, but deployment completed"
          }
          
          echo "✅ Deployment completed successfully!"
          echo "📊 Deployment info:"
          echo "  - Branch: ${{ github.ref_name }}"
          echo "  - Commit: ${{ github.sha }}"
          echo "  - Time: $(date)"
        EOF
    
    - name: 📊 Post-deployment health check
      run: |
        echo "🏥 Running health checks..."
        
        # Esperar un poco para que los servicios se estabilicen
        sleep 10
        
        # Test de conectividad externa
        for i in {1..5}; do
          if curl -f -s https://devproyectos.com/vista02/api/predict \
               -X POST -H "Content-Type: application/json" -d '{}' > /dev/null; then
            echo "✅ External connectivity test passed"
            break
          else
            echo "⏳ Attempt $i/5 failed, retrying in 10s..."
            sleep 10
          fi
          
          if [ $i -eq 5 ]; then
            echo "⚠️ External connectivity test failed after 5 attempts"
            echo "This might be normal if the API requires specific data"
          fi
        done
    
    - name: 📢 Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful!"
          echo "🌐 Site: https://devproyectos.com"
          echo "📝 Commit: ${{ github.sha }}"
        else
          echo "❌ Deployment failed!"
          echo "🔍 Check the logs above for details"
        fi

  # Job 5: Rollback (manual)
  rollback:
    name: 🔄 Rollback
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'rollback'
    
    steps:
    - name: 🔧 Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
    
    - name: 🔄 Execute rollback
      run: |
        ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'EOF'
          cd /var/www/Proyecto-Lenguaje-Gestos
          echo "🔄 Starting rollback..."
          ./deploy.sh rollback
          echo "✅ Rollback completed"
        EOF

# Configuración de notificaciones (opcional)
# Puedes agregar notificaciones a Slack, Discord, etc.
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && (needs.deploy.result == 'success' || needs.deploy.result == 'failure')
    
    steps:
    - name: 📢 Send notification
      run: |
        STATUS="${{ needs.deploy.result }}"
        if [ "$STATUS" == "success" ]; then
          EMOJI="✅"
          COLOR="good"
        else
          EMOJI="❌"
          COLOR="danger"
        fi
        
        echo "$EMOJI Deployment $STATUS for commit ${{ github.sha }}"
        # Aquí puedes agregar integración con Slack, Discord, etc.
        # Ejemplo para webhook genérico:
        # curl -X POST ${{ secrets.WEBHOOK_URL }} \
        #      -H "Content-Type: application/json" \
        #      -d "{\"text\": \"$EMOJI Deployment $STATUS\"}"




        